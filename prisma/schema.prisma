// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String   @id @default(cuid())
  slug          String   @unique
  title         String
  summary       String?
  typology      String?
  surfaceM2     Float?
  yieldGrossPct Float?
  yieldNetPct   Float?
  totalCost     Float?
  imageUrl      String
  imageAlt      String?
  featured      Boolean  @default(false)
  status        String   @default("active") // active, sold, upcoming
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  logoUrl     String
  websiteUrl  String?
  description String?
  featured    Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ArticleCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  articles    Article[]
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  articles Article[] @relation("ArticleTags")
}

model Article {
  id            String             @id @default(cuid())
  slug          String             @unique
  title         String
  excerpt       String?
  content       Json
  status        String             @default("DRAFT")
  publishedAt   DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  readingMinutes Int?
  coverImageUrl String?
  coverImageAlt String?
  seoTitle      String?
  seoDescription String?
  metadata      Json?
  faq           Json?
  categoryId    String?
  imagePrompt   String?
  featured      Boolean            @default(false)
  currentVersion Int               @default(1)
  category      ArticleCategory?   @relation(fields: [categoryId], references: [id])
  tags          Tag[]              @relation("ArticleTags")
  syncLogs      ArticleSyncLog[]

  @@index([updatedAt])
}

model ArticleSyncLog {
  id        String   @id @default(cuid())
  articleId String?
  source    String
  status    String
  error     String?
  payload   Json?
  response  Json?
  createdAt DateTime @default(now())
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role      @default(EDITOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
