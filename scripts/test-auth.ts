import { PrismaClient } from "@prisma/client"
import bcrypt from "bcryptjs"

const prisma = new PrismaClient()

async function testAuth() {
  console.log("üß™ Test du syst√®me d'authentification")
  console.log("=" .repeat(50))

  // 1. V√©rifier les variables d'environnement
  console.log("\nüìã Variables d'environnement :")
  console.log(`  DATABASE_URL : ${process.env.DATABASE_URL ? "‚úÖ D√©finie" : "‚ùå Manquante"} `)
  console.log(`  NEXTAUTH_URL : ${process.env.NEXTAUTH_URL ? "‚úÖ D√©finie" : "‚ùå Manquante"} - ${process.env.NEXTAUTH_URL || ""}`)
  console.log(`  NEXTAUTH_SECRET : ${process.env.NEXTAUTH_SECRET ? "‚úÖ D√©finie" : "‚ùå Manquante"}`)
  
  if (!process.env.DATABASE_URL) {
    console.error("\n‚ùå DATABASE_URL n'est pas d√©finie dans .env.local")
    console.error("Cr√©ez un fichier .env.local avec DATABASE_URL")
    process.exit(1)
  }

  if (!process.env.NEXTAUTH_SECRET) {
    console.warn("\n‚ö†Ô∏è  NEXTAUTH_SECRET n'est pas d√©finie")
    console.warn("G√©n√©rez un secret avec : openssl rand -base64 32")
  }

  try {
    // 2. Test de connexion √† la base de donn√©es
    console.log("\nüîå Test de connexion √† la base de donn√©es...")
    await prisma.$connect()
    console.log("‚úÖ Connexion r√©ussie")

    // 3. V√©rifier les utilisateurs
    console.log("\nüë• Utilisateurs dans la base de donn√©es :")
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        passwordHash: true,
        createdAt: true,
      },
    })

    if (users.length === 0) {
      console.log("‚ö†Ô∏è  Aucun utilisateur trouv√©")
      console.log("\nüí° Cr√©ez un utilisateur avec : npm run auth:setup")
    } else {
      users.forEach((user, index) => {
        console.log(`\n  ${index + 1}. ${user.email}`)
        console.log(`     - Nom : ${user.name || "Non d√©fini"}`)
        console.log(`     - R√¥le : ${user.role}`)
        console.log(`     - Mot de passe : ${user.passwordHash ? "‚úÖ D√©fini" : "‚ùå Non d√©fini"}`)
        console.log(`     - Cr√©√© le : ${user.createdAt.toLocaleDateString("fr-FR")}`)
      })
    }

    // 4. Test de validation d'un mot de passe (si des arguments sont fournis)
    const testEmail = process.argv[2]
    const testPassword = process.argv[3]

    if (testEmail && testPassword) {
      console.log(`\nüîê Test de connexion pour : ${testEmail}`)
      
      const user = await prisma.user.findUnique({
        where: { email: testEmail.trim().toLowerCase() },
      })

      if (!user) {
        console.log("‚ùå Utilisateur non trouv√©")
      } else if (!user.passwordHash) {
        console.log("‚ùå L'utilisateur n'a pas de mot de passe d√©fini")
      } else {
        const isValid = await bcrypt.compare(testPassword, user.passwordHash)
        if (isValid) {
          console.log("‚úÖ Mot de passe correct - Connexion autoris√©e")
        } else {
          console.log("‚ùå Mot de passe incorrect")
        }
      }
    } else {
      console.log("\nüí° Pour tester une connexion : npm run auth:test <email> <password>")
    }

    // 5. V√©rifier la configuration NextAuth
    console.log("\nüîß Configuration NextAuth :")
    console.log(`  - Page de connexion : /connexion`)
    console.log(`  - Redirection apr√®s connexion : /backoffice`)
    console.log(`  - Middleware prot√®ge : /backoffice/*`)

    console.log("\n‚úÖ Tests termin√©s")
    console.log("\nüìù Prochaines √©tapes :")
    console.log("1. Si .env.local n'existe pas, cr√©ez-le avec les variables n√©cessaires")
    console.log("2. Si aucun utilisateur n'existe : npm run auth:setup")
    console.log("3. Lancez l'application : npm run dev")
    console.log("4. Connectez-vous √† : http://localhost:3000/connexion")

  } catch (error) {
    console.error("\n‚ùå Erreur lors des tests :", error)
    
    if (error instanceof Error) {
      if (error.message.includes("P1001")) {
        console.error("\n‚ö†Ô∏è  Impossible de se connecter √† la base de donn√©es")
        console.error("V√©rifiez que :")
        console.error("  1. PostgreSQL est lanc√©")
        console.error("  2. La base de donn√©es existe")
        console.error("  3. DATABASE_URL est correcte dans .env.local")
        console.error("\nPour cr√©er la base de donn√©es : createdb hagnere_patrimoine")
      } else if (error.message.includes("P2021")) {
        console.error("\n‚ö†Ô∏è  Les tables n'existent pas dans la base de donn√©es")
        console.error("Ex√©cutez : npx prisma migrate deploy")
      }
    }
  } finally {
    await prisma.$disconnect()
  }
}

testAuth()
