import { PrismaClient } from "@prisma/client"
import bcrypt from "bcryptjs"
import readline from "readline"
import { promisify } from "util"

const prisma = new PrismaClient()

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

const question = promisify(rl.question).bind(rl)

async function setupAuth() {
  console.log("üîê Configuration du syst√®me d'authentification")
  console.log("=" .repeat(50))

  try {
    // Test de connexion √† la base de donn√©es
    console.log("\nüìä Test de connexion √† la base de donn√©es...")
    await prisma.$connect()
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie")

    // V√©rifier si des utilisateurs existent d√©j√†
    const userCount = await prisma.user.count()
    console.log(`\nüë• Nombre d'utilisateurs existants : ${userCount}`)

    if (userCount > 0) {
      const users = await prisma.user.findMany({
        select: { email: true, name: true, role: true },
      })
      console.log("\nUtilisateurs existants :")
      users.forEach(user => {
        console.log(`  - ${user.email} (${user.name}) - R√¥le : ${user.role}`)
      })

      const answer = await question("\nVoulez-vous cr√©er un nouvel utilisateur ? (o/n) : ")
      if (answer.toLowerCase() !== "o" && answer.toLowerCase() !== "oui") {
        console.log("‚ú® Configuration termin√©e")
        process.exit(0)
      }
    }

    console.log("\nüÜï Cr√©ation d'un nouvel utilisateur administrateur")
    console.log("-" .repeat(50))

    // Demander les informations
    const email = await question("Email : ") as string
    const name = await question("Nom : ") as string
    const password = await question("Mot de passe : ") as string

    // Validation basique
    if (!email || !password) {
      throw new Error("Email et mot de passe sont requis")
    }

    // V√©rifier si l'email existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: email.trim().toLowerCase() },
    })

    if (existingUser) {
      const updateAnswer = await question("\n‚ö†Ô∏è  Cet email existe d√©j√†. Voulez-vous mettre √† jour le mot de passe ? (o/n) : ")
      
      if (updateAnswer.toLowerCase() === "o" || updateAnswer.toLowerCase() === "oui") {
        const passwordHash = await bcrypt.hash(password, 10)
        await prisma.user.update({
          where: { email: email.trim().toLowerCase() },
          data: { passwordHash },
        })
        console.log("‚úÖ Mot de passe mis √† jour avec succ√®s")
      }
    } else {
      // Cr√©er le nouvel utilisateur
      const passwordHash = await bcrypt.hash(password, 10)
      const user = await prisma.user.create({
        data: {
          email: email.trim().toLowerCase(),
          passwordHash,
          name,
          role: "ADMIN",
        },
      })

      console.log("\n‚úÖ Utilisateur cr√©√© avec succ√®s :")
      console.log(`  Email : ${user.email}`)
      console.log(`  Nom : ${user.name}`)
      console.log(`  R√¥le : ${user.role}`)
    }

    console.log("\nüìù Prochaines √©tapes :")
    console.log("1. Assurez-vous que le fichier .env.local existe avec :")
    console.log("   - DATABASE_URL")
    console.log("   - NEXTAUTH_URL=http://localhost:3000")
    console.log("   - NEXTAUTH_SECRET (g√©n√©rez avec : openssl rand -base64 32)")
    console.log("\n2. Lancez l'application : npm run dev")
    console.log("3. Connectez-vous √† : http://localhost:3000/connexion")

  } catch (error) {
    console.error("\n‚ùå Erreur :", error)
    
    if (error instanceof Error && error.message.includes("P1001")) {
      console.error("\n‚ö†Ô∏è  Impossible de se connecter √† la base de donn√©es")
      console.error("V√©rifiez que PostgreSQL est lanc√© et que DATABASE_URL est correcte dans .env.local")
    }
    
    process.exit(1)
  } finally {
    rl.close()
    await prisma.$disconnect()
  }
}

setupAuth()
